// <auto-generated />
using System;
using CMS.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CMS.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230810193429_AddInTimeZonSeedDateMigration")]
    partial class AddInTimeZonSeedDateMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CMS.Domain.Entities.DesignCategories.DesignCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("DesignCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9750),
                            Name = "Movies"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9751),
                            Name = "Fitness"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9752),
                            Name = "Politics"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9752),
                            Name = "World"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9753),
                            Name = "Technology"
                        });
                });

            modelBuilder.Entity("CMS.Domain.Entities.Designs.Design", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Attribute")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DamenId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("sescription");

                    b.Property<long?>("DesignCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DesignCategoryId1")
                        .HasColumnType("bigint");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DamenId");

                    b.HasIndex("DesignCategoryId");

                    b.HasIndex("DesignCategoryId1");

                    b.ToTable("Designs");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Attribute = 1,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9731),
                            DamenId = 1L,
                            Description = "Good",
                            DesignCategoryId = 1L,
                            Language = 1,
                            Name = "Saua"
                        },
                        new
                        {
                            Id = 2L,
                            Attribute = 2,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9733),
                            DamenId = 2L,
                            Description = "Good",
                            DesignCategoryId = 2L,
                            Language = 1,
                            Name = "One"
                        });
                });

            modelBuilder.Entity("CMS.Domain.Entities.DesignTools.Color", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9645),
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9646),
                            Name = "Yellow"
                        });
                });

            modelBuilder.Entity("CMS.Domain.Entities.DesignTools.DesignTool", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ColorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FontSizeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("FontSizeId");

                    b.ToTable("DesignTools");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ColorId = 1L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9679),
                            FontSizeId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            ColorId = 2L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9680),
                            FontSizeId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            ColorId = 2L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9681),
                            FontSizeId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            ColorId = 1L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9681),
                            FontSizeId = 1L
                        });
                });

            modelBuilder.Entity("CMS.Domain.Entities.DesignTools.FontSize", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Size")
                        .HasColumnType("text")
                        .HasColumnName("size");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("FontSizes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9662),
                            Size = "5px"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9663),
                            Size = "10px"
                        });
                });

            modelBuilder.Entity("CMS.Domain.Entities.Domains.Damen", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Damens");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9591),
                            Name = "Uzum"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9592),
                            Name = "laptops"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9592),
                            Name = "Vachach"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9593),
                            Name = "Naura"
                        });
                });

            modelBuilder.Entity("CMS.Domain.Entities.TimeZones.TimeZon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text")
                        .HasColumnName("abbreviation");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OffSet")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TimeZons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Abbreviation = "ADT",
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9702),
                            Name = "Arabia",
                            OffSet = "UTC +4"
                        },
                        new
                        {
                            Id = 2L,
                            Abbreviation = "AMT",
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9704),
                            Name = "Armenia",
                            OffSet = "UTC +4"
                        },
                        new
                        {
                            Id = 3L,
                            Abbreviation = "AFT",
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9704),
                            Name = "Afganistan",
                            OffSet = "UTC +4:30"
                        },
                        new
                        {
                            Id = 4L,
                            Abbreviation = "ALMT",
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9705),
                            Name = "Alma-Ata",
                            OffSet = "UTC +6"
                        },
                        new
                        {
                            Id = 5L,
                            Abbreviation = "UZT",
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9706),
                            Name = "Uzbekistan ",
                            OffSet = "UTC +5"
                        });
                });

            modelBuilder.Entity("CMS.Domain.Entities.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DamenId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DesignId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DamenId");

                    b.HasIndex("DesignId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9456),
                            DamenId = 1L,
                            Email = "nurullo@gmail.com",
                            FirstName = "Nurullo",
                            LastName = "Nurmatov",
                            Password = "1234"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9460),
                            DamenId = 2L,
                            Email = "asad@gmail.com",
                            FirstName = "Asadbek",
                            LastName = "Asadov",
                            Password = "2564"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9461),
                            DamenId = 3L,
                            Email = "ikrom@gmail.com",
                            FirstName = "Ikrom",
                            LastName = "Ikromov",
                            Password = "4567"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9462),
                            DamenId = 4L,
                            Email = "nurullo@gmail.com",
                            FirstName = "Axror",
                            LastName = "Alimov",
                            Password = "7415"
                        });
                });

            modelBuilder.Entity("CMS.Domain.Entities.Users.UserGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DamenId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DamenId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9616),
                            DamenId = 1L,
                            Email = "john@example@gmail.com",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9617),
                            DamenId = 2L,
                            Email = "examp@gmail.com",
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9618),
                            DamenId = 3L,
                            Email = "exam2p@gmail.com",
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 8, 10, 19, 34, 28, 565, DateTimeKind.Utc).AddTicks(9619),
                            DamenId = 4L,
                            Email = "examp3@gmail.com",
                            UserId = 4L
                        });
                });

            modelBuilder.Entity("CMS.Domain.Entities.Designs.Design", b =>
                {
                    b.HasOne("CMS.Domain.Entities.Domains.Damen", "Damen")
                        .WithMany()
                        .HasForeignKey("DamenId");

                    b.HasOne("CMS.Domain.Entities.DesignCategories.DesignCategory", "DesignCategory")
                        .WithMany()
                        .HasForeignKey("DesignCategoryId");

                    b.HasOne("CMS.Domain.Entities.DesignCategories.DesignCategory", null)
                        .WithMany("Designs")
                        .HasForeignKey("DesignCategoryId1");

                    b.Navigation("Damen");

                    b.Navigation("DesignCategory");
                });

            modelBuilder.Entity("CMS.Domain.Entities.DesignTools.DesignTool", b =>
                {
                    b.HasOne("CMS.Domain.Entities.DesignTools.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("CMS.Domain.Entities.DesignTools.FontSize", "FontSize")
                        .WithMany()
                        .HasForeignKey("FontSizeId");

                    b.Navigation("Color");

                    b.Navigation("FontSize");
                });

            modelBuilder.Entity("CMS.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("CMS.Domain.Entities.Domains.Damen", "Damen")
                        .WithMany()
                        .HasForeignKey("DamenId");

                    b.HasOne("CMS.Domain.Entities.Designs.Design", "Design")
                        .WithMany()
                        .HasForeignKey("DesignId");

                    b.Navigation("Damen");

                    b.Navigation("Design");
                });

            modelBuilder.Entity("CMS.Domain.Entities.Users.UserGroup", b =>
                {
                    b.HasOne("CMS.Domain.Entities.Domains.Damen", "Damen")
                        .WithMany()
                        .HasForeignKey("DamenId");

                    b.HasOne("CMS.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("CMS.Domain.Entities.Users.User", null)
                        .WithMany("userGroups")
                        .HasForeignKey("UserId1");

                    b.Navigation("Damen");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS.Domain.Entities.DesignCategories.DesignCategory", b =>
                {
                    b.Navigation("Designs");
                });

            modelBuilder.Entity("CMS.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("userGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
